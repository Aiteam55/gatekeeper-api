package com.aiteam.gatekeeper.exceptions;

import com.aiteam.gatekeeper.responses.ErrorApiResponse;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;

@RestControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<ErrorApiResponse> handleGlobalException(RuntimeException exception) {
        ErrorApiResponse errorResponse = new ErrorApiResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), exception.getMessage());
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ErrorApiResponse> handleSQLException(DataIntegrityViolationException exception) {
        Throwable rootCause = exception.getRootCause();

        if (rootCause instanceof SQLIntegrityConstraintViolationException &&
                rootCause.getMessage().contains("unique_name")) {

            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body(new ErrorApiResponse(409, "Client app name already exists."));
        }

        ErrorApiResponse errorResponse = new ErrorApiResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), "Data integrity violation: " + rootCause.getMessage());
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
